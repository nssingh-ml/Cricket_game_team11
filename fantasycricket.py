# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'project2.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from score_calc import player_points
from PyQt5.QtWidgets import QMessageBox

from open_team import Ui_Dialog as open
from evaluate import Ui_MainWindow as eval
from new_team import Ui_Dialog as new

import sqlite3
import logging

cricket_db=sqlite3.connect('CRICKET.db')
cricket_cur=cricket_db.cursor()

logging.basicConfig(level=logging.INFO)



class Ui_MainWindow(object):

    def __init__(self):

        ##windows intialising
        self.new_window=QtWidgets.QMainWindow()
        self.new_screen=new()
        self.new_screen.setupUi(self.new_window)

        self.open_window=QtWidgets.QMainWindow()
        self.open_screen=open()
        self.open_screen.setupUi(self.open_window)

        self.eval_window=QtWidgets.QMainWindow()
        self.eval_screen=eval()
        self.eval_screen.setupUi(self.eval_window)

    ##file opening menu
    def file_open(self):
        self.open_screen.setupUi(self.open_window)
        self.open_window.show()
        self.open_screen.open_btn.clicked.connect(self.openteam)

    ##evaluate
    def file_evaluate(self):
        self.eval_screen.setupUi(self.eval_window)
        self.eval_window.show()


    ##new file
    def file_new(self):
        self.new_screen.setupUi(self.new_window)
        self.new_window.show()
        self.new_screen.save_btn.clicked.connect(self.namechanged)

    def setupUi(self, MainWindow):

        ## intialising points
        self.avail_points=1000
        self.used_points = 0
        self.totalcount = 0
        self.batsmencount = 0
        self.bowlerscount = 0
        self.alrdscount = 0
        self.wicketerscount = 0

        ## initialising list
        self.bow_list = []  # bowler names list
        self.bat_list = []  # batsman nameslist
        self.ar_list = []  # allrounder names list
        self.wk_list = []  # wicketer names list
        self.selected_plyer_list = []  # selectedplayer's list

        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(996, 742)
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Condensed")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.your_selection = QtWidgets.QGraphicsView(self.centralwidget)
        self.your_selection.setGeometry(QtCore.QRect(120, 10, 721, 121))
        self.your_selection.setObjectName("your_selection")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(140, 30, 151, 31))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.BAT = QtWidgets.QLabel(self.centralwidget)

        ##batsaman counter
        self.BAT.setGeometry(QtCore.QRect(150, 90, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Condensed")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.BAT.setFont(font)
        self.BAT.setObjectName("BAT")
        self.Bat_number = QtWidgets.QLineEdit(self.centralwidget)
        self.Bat_number.setGeometry(QtCore.QRect(240, 90, 31, 22))
        self.Bat_number.setObjectName("Bat_number")

        #bowler counter
        self.BOW = QtWidgets.QLabel(self.centralwidget)
        self.BOW.setGeometry(QtCore.QRect(300, 90, 81, 21))
        self.BOW.setObjectName("BOW")
        self.bow_number = QtWidgets.QLineEdit(self.centralwidget)
        self.bow_number.setGeometry(QtCore.QRect(380, 90, 31, 22))
        self.bow_number.setObjectName("bow_number")

        # all rounder counter
        self.AR = QtWidgets.QLabel(self.centralwidget)
        self.AR.setGeometry(QtCore.QRect(450, 90, 91, 21))
        self.AR.setObjectName("AR")
        self.AR_number = QtWidgets.QLineEdit(self.centralwidget)
        self.AR_number.setGeometry(QtCore.QRect(540, 90, 31, 22))
        self.AR_number.setObjectName("AR_number")

        #wicket keeper counter
        self.WK = QtWidgets.QLabel(self.centralwidget)
        self.WK.setGeometry(QtCore.QRect(630, 90, 121, 21))
        self.WK.setObjectName("WK")
        self.WK_number = QtWidgets.QLineEdit(self.centralwidget)
        self.WK_number.setGeometry(QtCore.QRect(750, 90, 31, 22))
        self.WK_number.setObjectName("WK_number")



        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(90, 160, 101, 16))
        font = QtGui.QFont()
        font.setItalic(False)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(530, 160, 81, 16))
        font = QtGui.QFont()
        font.setItalic(False)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")



        ##points available and used(linedit,lineedit2)

        self.points_aval = QtWidgets.QLineEdit(self.centralwidget)
        self.points_aval.setGeometry(QtCore.QRect(210, 160, 81, 22))
        font = QtGui.QFont()
        font.setItalic(True)
        self.points_aval.setFont(font)
        self.points_aval.setMaxLength(1000)
        self.points_aval.setObjectName("points_aval")
        self.points_used= QtWidgets.QLineEdit(self.centralwidget)
        self.points_used.setGeometry(QtCore.QRect(640, 160, 81, 22))
        font = QtGui.QFont()
        font.setItalic(True)
        self.points_used.setFont(font)
        self.points_used.setObjectName("points_used")

    ##radio buttons
        #batsman
        self.radioButton_BAT = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_BAT.setEnabled(False)
        self.radioButton_BAT.setGeometry(QtCore.QRect(90, 200, 51, 20))
        font = QtGui.QFont()
        font.setItalic(True)
        self.radioButton_BAT.setFont(font)
        self.radioButton_BAT.setObjectName("radioButton_BAT")

        #bowler
        self.radioButton_BOW = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_BOW.setEnabled(False)
        self.radioButton_BOW.setGeometry(QtCore.QRect(170, 200, 61, 20))
        font = QtGui.QFont()
        font.setItalic(True)
        self.radioButton_BOW.setFont(font)
        self.radioButton_BOW.setObjectName("radioButton_BOW")

        ##all rounder
        self.radioButton_AR = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_AR.setEnabled(False)
        self.radioButton_AR.setGeometry(QtCore.QRect(240, 200, 51, 20))
        font = QtGui.QFont()
        font.setItalic(True)
        self.radioButton_AR.setFont(font)
        self.radioButton_AR.setObjectName("radioButton_AR")

        ##wicket keeper
        self.radioButton_WK = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_WK.setEnabled(False)
        self.radioButton_WK.setGeometry(QtCore.QRect(310, 200, 51, 20))
        font = QtGui.QFont()
        font.setItalic(True)
        self.radioButton_WK.setFont(font)
        self.radioButton_WK.setObjectName("radioButton_WK")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(530, 200, 91, 16))
        self.label_4.setObjectName("label_4")

        ##teamname
        self.team_name = QtWidgets.QLineEdit(self.centralwidget)
        self.team_name.setGeometry(QtCore.QRect(640, 200, 201, 22))
        font = QtGui.QFont()
        font.setItalic(True)
        self.team_name.setFont(font)
        self.team_name.setObjectName("team_name")


        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(530, 240, 111, 16))
        font = QtGui.QFont()
        font.setItalic(True)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")

        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(90, 230, 111, 31))
        font = QtGui.QFont()
        font.setItalic(True)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(70, 260, 741, 421))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
    ##list widget
        ##available player list
        self.availableplayer_lw = QtWidgets.QListWidget(self.horizontalLayoutWidget)
        self.availableplayer_lw.setObjectName("availableplayer_lw")
        self.horizontalLayout.addWidget(self.availableplayer_lw)
        self.label_7 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout.addWidget(self.label_7)

        ##selected player list
        self.slectedplayer_lw = QtWidgets.QListWidget(self.horizontalLayoutWidget)
        self.slectedplayer_lw.setObjectName("slectedplayer_lw")
        self.horizontalLayout.addWidget(self.slectedplayer_lw)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 996, 26))
        self.menubar.setObjectName("menubar")
        self.menuManage_teams = QtWidgets.QMenu(self.menubar)
        self.menuManage_teams.setObjectName("menuManage_teams")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


    ##shortcut

        #NEW TEAM
        self.NEW_Teanm = QtWidgets.QAction(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.NEW_Teanm.setFont(font)
        self.NEW_Teanm.setShortcutVisibleInContextMenu(True)
        self.NEW_Teanm.setObjectName("NEW_Teanm")
        self.NEW_Teanm.triggered.connect(self.file_new)

        #OPEN TEAM
        self.OPEN_Team = QtWidgets.QAction(MainWindow)
        self.OPEN_Team.setObjectName("OPEN_Team")
        self.OPEN_Team.triggered.connect(self.file_open)

        #SAVETEAM
        self.SAVE_Team = QtWidgets.QAction(MainWindow)
        self.SAVE_Team.setShortcutVisibleInContextMenu(True)
        self.SAVE_Team.setObjectName("SAVE_Team")
        self.SAVE_Team.triggered.connect(self.file_save)

        #EVALUATE TEAM
        self.EVALUATE_Team = QtWidgets.QAction(MainWindow)
        self.EVALUATE_Team.setVisible(True)
        self.EVALUATE_Team.setObjectName("EVALUATE_Team")
        self.EVALUATE_Team.triggered.connect(self.file_evaluate)

        #QUIT WINDOW
        self.Quit = QtWidgets.QAction(MainWindow)
        self.Quit.setObjectName("Quit")
        self.Quit.triggered.connect(self.quit)

        self.menuManage_teams.addAction(self.NEW_Teanm)
        self.menuManage_teams.addAction(self.OPEN_Team)
        self.menuManage_teams.addAction(self.SAVE_Team)
        self.menuManage_teams.addAction(self.EVALUATE_Team)
        self.menuManage_teams.addAction(self.Quit)
        self.menubar.addAction(self.menuManage_teams.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.availableplayer_lw.itemDoubleClicked.connect(self.removelist1)
        self.slectedplayer_lw.itemDoubleClicked.connect(self.removelist2)

        self.stats={}   ## stats of player

        # self.new_screen.save_btn.clicked.connect(self.changed)

        # RADIOBUTTONS  CLICK
        self.radioButton_BAT.clicked.connect(self.load_names)
        self.radioButton_AR.clicked.connect(self.load_names)
        self.radioButton_BOW.clicked.connect(self.load_names)
        self.radioButton_WK.clicked.connect(self.load_names)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Your selection"))
        self.BAT.setText(_translate("MainWindow", "Batsman (BAT)"))
        self.BOW.setText(_translate("MainWindow", "Bowler(BOW)"))
        self.AR.setText(_translate("MainWindow", "Allrounder(AR)"))
        self.WK.setText(_translate("MainWindow", "Wicket-Keeper(WK)"))
        self.bow_number.setText(_translate("MainWindow", "00"))
        self.AR_number.setText(_translate("MainWindow", "00"))
        self.WK_number.setText(_translate("MainWindow", "00"))
        self.label_2.setText(_translate("MainWindow", "Points Available"))
        self.label_3.setText(_translate("MainWindow", "Points Used"))
        self.points_aval.setText(_translate("MainWindow", "00"))
        self.points_used.setText(_translate("MainWindow", "00"))
        self.Bat_number.setText(_translate("MainWindow", "00"))
        self.radioButton_BOW.setText(_translate("MainWindow", "BOW"))
        self.radioButton_AR.setText(_translate("MainWindow", "AR"))
        self.team_name.setText(_translate("MainWindow","team name"))
        self.radioButton_WK.setText(_translate("MainWindow", "WK"))
        self.label_4.setText(_translate("MainWindow", "TEAM NAME"))
        self.label_6.setText(_translate("MainWindow", "Selected Players"))
        self.radioButton_BAT.setText(_translate("MainWindow", "BAT"))
        self.label_5.setText(_translate("MainWindow", "Available Players"))
        self.label_7.setText(_translate("MainWindow", "     >>      "))
        self.menuManage_teams.setTitle(_translate("MainWindow", "Manage teams"))
        self.NEW_Teanm.setText(_translate("MainWindow", "NEW Team"))
        self.NEW_Teanm.setStatusTip(_translate("MainWindow", "enter your team name"))
        self.NEW_Teanm.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.OPEN_Team.setText(_translate("MainWindow", "OPEN Team"))
        self.OPEN_Team.setStatusTip(_translate("MainWindow", "opening team"))
        self.OPEN_Team.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.SAVE_Team.setText(_translate("MainWindow", "SAVE Team"))
        self.SAVE_Team.setStatusTip(_translate("MainWindow", "saving team"))
        self.SAVE_Team.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.EVALUATE_Team.setText(_translate("MainWindow", "EVALUATE Team"))
        self.Quit.setText(_translate("MainWindow", "Quit"))




    def namechanged(self):
        team_name=self.new_screen.newteam_name.text()
        cricket_cur.execute('select distinct name from teams;')
        p=cricket_cur.fetchall()
        for i in p:
            logging.debug('team names',i)
            if i[0]==team_name:

                logging.debug('inder same name')
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Information)
                msg.setText("This Team name is already exists!!\nPlease choose another name")
                msg.setWindowTitle("Invalid Team Name")
                msg.exec_()
                return 0
        if(len(team_name)==0 or team_name.startswith(' ')):
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Cannot leave the team name field blank!!!")
            msg.setWindowTitle("Invalid Team Name")
            msg.exec_()
            return 0
        elif team_name.isnumeric():
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Please enter a valid teamname\n(Name must contain atleast one character)!!")
            msg.setWindowTitle("Invalid Team Name")
            msg.exec_()
            return 0
        else:
            self.reset()
            self.tname = self.new_screen.newteam_name.text()
            self.team_name.setText(self.tname)
            self.new_window.close()
        ###TO RESET
    def reset(self):
        self.enable_buttons()
        self.load_names()
        self.used_points=0
        self.avail_points=1000
        self.totalcount=0
        self.batsmencount=0
        self.bowlerscount=0
        self.wicketerscount=0
        self.alrdscount=0
        self.points_aval.setText(str(self.avail_points))
        self.points_used.setText(str(self.used_points))
        self.bow_number.setText(str(self.bowlerscount))
        self.Bat_number.setText(str(self.batsmencount))
        self.AR_number.setText(str(self.alrdscount))
        self.WK_number.setText(str(self.wicketerscount))
        self.selected_plyer_list.clear()
        self.slectedplayer_lw.clear()
        self.load_names()

    ##save team
    def file_save(self):
        # msg = QMessageBox()
        if not self.error():  # IF THERE IS AN ERROR
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setInformativeText(' Insufficient Players OR Points !!')
            msg.setWindowTitle("Selection Error")
            msg.exec_()
        elif self.error():
            try:
                cricket_cur.execute('select distinct name from teams;')
                r=cricket_cur.fetchall()
                for i in r:
                    if self.team_name.text()==i[0]:
                        logging.debug('already updating')
                        cricket_cur.execute("DELETE  FROM teams WHERE name='" + self.team_name.text() + "';")  ##delting to update team

            except:
                logging.debug('error')
            for i in range(self.slectedplayer_lw.count()):
                logging.debug('***adding***')
                logging.debug('team_name:',self.team_name.text())
                logging.debug('player_name:',self.selected_plyer_list[i])
                logging.debug('points:',player_points[self.selected_plyer_list[i]])
                try:

                    cricket_cur.execute("INSERT INTO teams (name,players,value) VALUES (?,?,?)",
                                     (self.team_name.text(), self.selected_plyer_list[i], player_points[self.selected_plyer_list[i]]))
                    print(2)
                    # msg = QMessageBox()
                    # msg.setIcon(QMessageBox.information)
                    # msg.setInformativeText(' Team Saved Successfully! ')
                    # msg.setWindowTitle("Done")
                    # msg.exec_()
                except:
                    logging.debug('error in operation')

            cricket_db.commit()
            print(1)
            msg = QMessageBox()
            # msg.setIcon(QMessageBox.Critical)
            msg.setInformativeText('Team Saved Successfully!')
            msg.setWindowTitle("Done")
            msg.exec_()
            # self.file_evaluate()
        else:
            logging.debug('!error in operation')
            print(3)

    ##QIUTING
    def quit(self):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setInformativeText('Thank YOU!')
        msg.setWindowTitle("Fantasy Cricket")
        msg.exec_()
        logging.debug('exit')
        sys.exit()

    ####RADIO BUTTON CLICKED
    def load_names(self):
        Batsman = 'BAT'
        WicketKeeper = 'WK'
        Allrounder = 'AR'
        Bowler = 'BWL'
        sql1 = "SELECT player,value from stats WHERE ctg = '" + Batsman + "';"
        sql2 = "SELECT Player,value from stats WHERE ctg = '" + WicketKeeper + "';"
        sql3 = "SELECT Player,value from stats WHERE ctg ='" + Allrounder + "';"
        sql4 = "SELECT Player,value from stats WHERE ctg = '" + Bowler + "';"

        cricket_cur.execute(sql1)
        x_bat=cricket_cur.fetchall()
        cricket_cur.execute(sql2)
        x_wk=cricket_cur.fetchall()
        cricket_cur.execute(sql3)
        x_ar=cricket_cur.fetchall()
        cricket_cur.execute(sql4)
        x_bow=cricket_cur.fetchall()

        batsmen = []
        bowlers = []
        allrounders = []
        wcktkeepers = []

        for k in x_bat:
            batsmen.append(k[0])
            self.bat_list.append(k[0])
            self.stats[k[0]] = k[1]
        for k in x_bow:
            bowlers.append(k[0])
            self.stats[k[0]] = k[1]
            self.bow_list.append(k[0])
        for k in x_wk:
            wcktkeepers.append(k[0])
            self.stats[k[0]] = k[1]
            self.wk_list.append(k[0])
        for k in x_ar:
            allrounders.append(k[0])
            self.stats[k[0]] = k[1]
            self.ar_list.append(k[0])

        for i in self.selected_plyer_list:
            if i in batsmen:
                batsmen.remove(i)
            elif i in allrounders:
                allrounders.remove(i)
            elif i in wcktkeepers:
                wcktkeepers.remove(i)
            elif i in bowlers:
                bowlers.remove(i)
        if self.radioButton_BAT.isChecked()== True:
            self.availableplayer_lw.clear()
            for i in range(len(batsmen)):
                item=QtWidgets.QListWidgetItem(batsmen[i])
                font=QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                item.setFont(font)
                self.availableplayer_lw.addItem(item)
        elif self.radioButton_BOW.isChecked()==True:
            self.availableplayer_lw.clear()
            for i in range(len(bowlers)):
                item = QtWidgets.QListWidgetItem(bowlers[i])
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                item.setFont(font)
                self.availableplayer_lw.addItem(item)
        elif self.radioButton_WK.isChecked()==True:
            self.availableplayer_lw.clear()
            for i in range(len(wcktkeepers)):
                item = QtWidgets.QListWidgetItem(wcktkeepers[i])
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                item.setFont(font)
                self.availableplayer_lw.addItem(item)
        elif self.radioButton_AR.isChecked()==True:
            self.availableplayer_lw.clear()
            for i in range(len(allrounders)):
                item = QtWidgets.QListWidgetItem(allrounders[i])
                font = QtGui.QFont()
                font.setBold(True)
                font.setWeight(75)
                item.setFont(font)
                self.availableplayer_lw.addItem(item)

    ### REMOVE FROM AVAILABLE PLAYERS AND ADD TO SELECTED PLAYERS
    def removelist1(self,item):
        self.condition_1(item.text())
        self.availableplayer_lw.takeItem(self.availableplayer_lw.row(item))
        self.slectedplayer_lw.addItem(item.text())
        self.totalcount=self.slectedplayer_lw.count()
        self.selected_plyer_list.append(item.text())
        self.error()

    ##adding and deducing points
    def condition_1(self,cat):
        self.avail_points -= self.stats[cat]
        self.used_points += self.stats[cat]
        if cat in self.bow_list:
            self.bowlerscount +=1
        elif cat in self.bat_list:
            self.batsmencount +=1
        elif cat in self.ar_list:
            self.alrdscount +=1
        elif cat in self.wk_list:
            self.wicketerscount +=1

        self.points_aval.setText(str(self.avail_points))
        self.points_used.setText(str(self.used_points))
        self.Bat_number.setText(str(self.batsmencount))
        self.bow_number.setText(str(self.bowlerscount))
        self.AR_number.setText(str(self.alrdscount))
        self.WK_number.setText(str(self.wicketerscount))



    def condition_2(self,cat):
        self.avail_points += self.stats[cat]
        self.used_points -= self.stats[cat]
        if cat in self.bow_list:
            self.bowlerscount -= 1
        elif cat in self.bat_list:
            self.batsmencount -= 1
        elif cat in self.ar_list:
            self.alrdscount -= 1
        elif cat in self.wk_list:
            self.wicketerscount -= 1

        self.points_aval.setText(str(self.avail_points))
        self.points_used.setText(str(self.used_points))
        self.Bat_number.setText(str(self.batsmencount))
        self.bow_number.setText(str(self.bowlerscount))
        self.AR_number.setText(str(self.alrdscount))
        self.WK_number.setText(str(self.wicketerscount))

    def removelist2(self,item):
        self.slectedplayer_lw.takeItem(self.slectedplayer_lw.row(item))
        self.availableplayer_lw.addItem(item.text())
        self.selected_plyer_list.remove(item.text())
        self.totalcount=self.slectedplayer_lw.count()
        self.condition_2(item.text())
        # self.error()



    ###when open team selected
    def openteam(self):
        try:
            self.reset()
            teamname=self.open_screen.open_team.currentText()
            # if(teamname==''):
            #     self.error()
            #     return 0
            self.team_name.setText(teamname)
            self.enable_buttons()
            cricket_cur.execute("SELECT players from teams WHERE name= '" + teamname + "';")
            y=cricket_cur.fetchall()
            score=[]
            for i in y:
                cricket_cur.execute("SELECT value from stats WHERE player='" + i[0] + "';")
                x=cricket_cur.fetchone()
                score.append(x[0])
            logging.debug(score)
            sum=0
            for i in score:
                sum +=i
            self.slectedplayer_lw.clear()
            self.load_names()
            for i in y:
                self.slectedplayer_lw.addItem(i[0])
                self.selected_plyer_list.append(i[0])
                self.condition_1(i[0])
            self.used_points=sum
            self.avail_points=1000-sum
            self.points_aval.setText(str(self.avail_points))
            self.points_used.setText(str(self.used_points))
            self.open_window.close()
        except:
            self.open_window.close()

    def enable_buttons(self):
        self.radioButton_AR.setEnabled(True)
        self.radioButton_WK.setEnabled(True)
        self.radioButton_BOW.setEnabled(True)
        self.radioButton_BAT.setEnabled(True)


    ####ERROR HANDLING
    def error(self):
        msg=QMessageBox()
        if self.avail_points <=0:
            self.points_aval.setText('0')
            # msg.setIcon(QMessageBox.critical)
            msg.setIcon(QMessageBox.Critical)
            msg.setInformativeText('Not enough points!')
            msg.setWindowTitle("Cricket selection")
            msg.exec_()
            return 0
        if self.wicketerscount > 1:
            msg.setIcon(QMessageBox.Critical)
            # msg.setText("Error")
            msg.setInformativeText('Only 1 wicketkeeper is allowed!')
            msg.setWindowTitle("Error")
            msg.exec_()
            return 0
        if self.totalcount > 11:
            msg.setIcon(QMessageBox.Critical)
            msg.setInformativeText('No more than 11 players are allowed!')
            msg.setWindowTitle("Selection Error")
            msg.exec_()
            logging.debug('available points', self.avail_points)
            return 0
        if self.totalcount < 11:
            return 0
        if self.wicketerscount < 1:
            return 0
        return 1




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
